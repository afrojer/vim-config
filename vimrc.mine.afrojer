
let g:os = substitute(system('uname'), "\n", "", "")

if $TERM =~ '256color'
	set t_Co=256
elseif $TERM =~ '^xterm$'
	set t_Co=256
elseif g:os == "Darwin"
	set t_Co=16
endif

set mouse=a                     " allow mouse from terminal

command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

map <Leader>ll :HighlightLongLines 80<cr>
map <Leader>nl :HighlightLongLines 1000<cr>

function! SetWhitespaceFormat(style)
	if a:style =~ '^android'
		set expandtab
		set tabstop=4
		set shiftwidth=4
		set textwidth=120
		echomsg "Whitespace format set to 'android'"
	elseif a:style =~ '^pvr'
		set noexpandtab
		set tabstop=4
		set shiftwidth=4
		set textwidth=80
		echomsg "Whitespace format set to 'PVR'"
	elseif a:style =~ '^kernel'
		set noexpandtab
		set tabstop=8
		set shiftwidth=8
		set textwidth=80
		echomsg "Whitespace format set to 'kernel'"
	elseif a:style =~ '^ocaml'
		set expandtab
		set tabstop=2
		set shiftwidth=2
		set textwidth=500
		echomsg "Whitespace format set to 'OCaml'"
	elseif a:style =~ '^latex'
		set expandtab
		set tabstop=2
		set shiftwidth=2
		set textwidth=80
		echomsg "Whitespace format set to 'LaTeX'"
	else
		set noexpandtab
		set tabstop=4
		set shiftwidth=4
		set textwidth=80
		echomsg "default whitespace format..."
	endif
endfunction

set noexpandtab
set tabstop=4
set shiftwidth=4
set textwidth=80

map <Leader>wa :call SetWhitespaceFormat("android")<CR>
map <Leader>wk :call SetWhitespaceFormat("kernel")<CR>
map <Leader>wp :call SetWhitespaceFormat("pvr")<CR>
map <Leader>wo :call SetWhitespaceFormat("ocaml")<CR>
map <Leader>wl :call SetWhitespaceFormat("latex")<CR>
map <Leader>wd :call SetWhitespaceFormat("default")<CR>


command! -nargs=* GrepSyscall call s:GrepSyscall(<f-args>)
function! s:GrepSyscall(name,path)
	let tgtPath = a:path != '' ? a:path : '.'
	if a:name != ''
		echomsg "Looking for a syscall named ".a:name." in ".tgtPath
		exec "grep -sInR 'SYSCALL.*".a:name."' ".tgtPath
	else
		echomsg "Usage: GrepSyscall [syscall_name] {path}"
	endif
endfunction

map <Leader>gs :call GrepSyscall

""""""""""""""""""""""""""""""
" => Minibuffer plugin
""""""""""""""""""""""""""""""
"map <M-j> :bn<cr>
"map <M-k> :bp<cr>
"map <C-h> :tabprev<cr>
"map <C-l> :tabnext<cr>

" force these values (Ctrl-J seems to get messed up somwhere...)
nnoremap <C-j> :wincmd j<CR>
nnoremap <C-k> :wincmd k<CR>
nnoremap <C-h> :wincmd h<CR>
nnoremap <C-l> :wincmd l<CR>

nnoremap <C-N> :cnext<cr>
nnoremap <C-P> :cprev<cr>

if g:os == "Linux"
	:command! -bar -nargs=1 OpenURL :!firefox <args>
elseif g:os == "Darwin"
	:command! -bar -nargs=1 OpenURL :!open <args>
endif

" CleanClose
nmap fc :call CleanClose(1)<cr>
nmap fq :call CleanClose(0)<cr>
function! CleanClose(tosave)
	if (a:tosave == 1)
		w!
	endif
	let todelbufNr = bufnr("%")
	let newbufNr = bufnr("#")
	if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
		exe "b".newbufNr
	else
		bnext
	endif
	if (bufnr("%") == todelbufNr)
		new
	endif
	exe "bd!".todelbufNr
endfunction
""""""""""""""""""""""""""""""""""""""""

let Grep_Skip_Dirs = '.git'
let Grep_Skip_files = '*~ cscope* .svn'
" -s: suppress non-existant/unreadable file errors
" -I: process binary files
" -n: prefix result with line number
" -R: recursive
let Grep_Default_Options = '-s -I -n -R'
nnoremap <silent> <F7> :Rgrep <CR><CR><CR><CR>

map <Leader>ss :setlocal spell!<cr>
map <Leader>tr :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
map <Leader>me :MiniBufExplorer<cr>
map <Leader>c :call setqflist([])<cr>

if has("unix")
  if g:os == "Darwin"
"    vnoremap <Leader>y y:call system("pbcopy", getreg("\""))<cr>
"    nnoremap <Leader>p :call setreg("\"",system("pbpaste"))<CR>p
    vnoremap <Leader>y y:call system("ssh localhost pbcopy", getreg(""))<CR><CR>
    nnoremap <Leader>p :call setreg("",system("ssh localhost pbpaste"))<CR>p
  else
    vnoremap <Leader>y "*y
    nnoremap <Leader>p "*p
  endif
endif

" Let mac-vim receive meta-key input
if has("gui_running") && has("unix")
  if g:os == "Darwin"
    set invmmta
  endif
endif

""""""""""""""""""""""""""""""""""""""
" Some Vim-LaTeX settings
set shellslash
set grepprg=grep\ -nH\ $*
if has('gui_running')
	let g:tex_flavor='pdflatex'
	let g:Tex_DefaultTargetFormat = 'pdf'
	"TexLet g:Tex_TreatMacViewerAsUNIX = 1
	let Tex_ViewRuleComplete_pdf = '/usr/bin/open -a Preview $*.pdf'
endif

""""""""""""""""""""""""""""""""""""""
" When I write assembly, I write ARM assembly
au BufNewFile,BufRead *.S set filetype=armasm

""""""""""""""""""""""""""""""""""""""
" Pipe kernel buffer into appropriately named file: voila colors
au BufNewFile,BufRead *.crdmesg set filetype=crdmesg
au BufNewFile,BufRead *.dmesg set filetype=xnudmesg
au BufNewFile,BufRead *.xnudmesg set filetype=xnudmesg

" Fugitve key mappings
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
autocmd BufReadPost fugitive://* set bufhidden=delete



""""""""""""""""""""""""""""""""""""""
" Get rid of some very annoying warnings opening stdin

compiler gcc
set errorformat^=%-G<stdin>:%l:2:\ warning:\ #warning\ syscall\ process_vm_readv\ not\ implemented\ [-Wcpp]
set errorformat^=%-G<stdin>:%l:2:\ warning:\ #warning\ syscall\ process_vm_writev\ not\ implemented\ [-Wcpp]
set errorformat^=%-G<stdin>:%l:2:\ warning:\ #warning\ \"TODO:\ return_address\ should\ user\ unwind\ tables\"
set errorformat^=%-G<stdin>:%l:2:\ warning:\ #warning\ \"TODO:\ return_address\ should\ user\ unwind\ tables\"\ [-Wcpp]

""""""""""""""""""""""""""""""""""""""
" Remap autocomplete to ctrl+space
if has("gui_running")
  " C-Space seems to work under gVim on both Linux and win32
  inoremap <C-Space> <C-n>
else " no gui
  if has("unix")
    inoremap <Nul> <C-n>
  else
  " I have no idea of the name of Ctrl-Space elsewhere
  endif
endif

let g:SuperTabMappingTabLiteral = '<s-tab>'
let g:SuperTabMappingForward = '<C-Space>'
let g:SuperTabMappingBackward = '<s-nul>'

""""""""""""""""""""""""""""""""""""""
" fugitive keybindings
nnoremap <silent> <Leader>gf :Git fetch<CR>
nnoremap <silent> <Leader>gs :Gstatus<CR>

""""""""""""""""""""""""""""""""""""""
" vim-gitgutter keybindings
let g:gitgutter_map_keys = 0
nnoremap <silent> <Leader>hn :GitGutterNextHunk<CR>
nnoremap <silent> <Leader>hp :GitGutterPrevHunk<CR>
nnoremap <silent> <Leader>hs :GitGutterStageHunk<CR>
nnoremap <silent> <Leader>hr :GitGutterRevertHunk<CR>
nnoremap <silent> <Leader>hv :GitGutterPreviewHunk<CR>
nnoremap <silent> <Leader>gg :GitGutterToggle<CR>

""""""""""""""""""""""""""""""""""""""
" cscope keybindings
set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-
" The :execute... bits will perform a Ctrl-O to jump back to the previous
" location, and the :copen will open the quickfix buffer. This interacts nicely
" with the cscopequickfix line above: now cscope results will be placed in the
" quickfix buffer, you will still be in the same location in your code, and the
" quickfix buffer will be in focus for easy searching of results.

" Find this C symbol
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find this definition
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>G :cs find g <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>G :cs find g <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find functions calling this function
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find assignments to
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find this egrep pattern
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find this file
"nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find files #-including this file
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>
" Find functions called by this function
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:copen<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR> :execute "normal! \<C-O>"<CR>:cwindow<CR>/<C-R>=expand("<cword>")<CR><CR>

" Silver Searcher (Ag) plugin
set runtimepath^=~/.vim/bundle/ag

" Take it easy on the auto updating
autocmd BufEnter * set updatetime=60000
